##################################################################################################################
# This is the TF VARS file for setting up basic intranet zone with the following
# - intranet ingress egress vnet
# - intranet vnet (peered with intranet ingress egress vnet)
# - management vnet (peered with intranet ingress egress vnet and intranet vnet)
##################################################################################################################

subscription_id = "enter-subscription-id"
tenant_id       = "enter-tenant-id"
client_id       = "enter-client-id"
client_secret   = "enter-client-secret"

##########################################
# Resource Group module
##########################################

random_string_length = 4
location             = "East US"

# Resource groups
resource_groups = {  
  intranet_rg = {
    name = "intranet_rg"
  }

  intranet_ingress_egress_rg = {
    name = "intranet_ingress_egress_rg"
  }

  mgmt_rg = {
    name = "mgmt_rg"
  }
}

##########################################
# Network module
##########################################

# Virtual networks
virtual_networks = {
  # intranet ingress egress
  intranet_ingress_egress_vnet = {
    rg_key        = "intranet_ingress_egress_rg"
    name          = "intranet_ingress_egress_vnet"
    address_space = ["10.1.0.0/16"]
    tags          = {}
  }

  # intranet
  intranet_vnet = {
    rg_key        = "intranet_rg"
    name          = "intranet_vnet"
    address_space = ["10.2.0.0/16"]
    tags          = {}
  }

  # management
  mgmt_vnet = {
    rg_key        = "mgmt_rg"
    name          = "mgmt_vnet"
    address_space = ["10.3.0.0/16"]
    tags          = {}
  }
}

# Virtual network peerings
vnet_peers = { 
  # intranet ingress egress and intranet
  intranet_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "intranet_rg"
    vnet_key                     = "intranet_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "intranet_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  intranet_ingress_egress_intranet_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "intranet_vnet"
    name                         = "intranet_ingress_egress_intranet_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # intranet and mgmt
  intranet_mgmt_vnet_peer = {
    rg_key                       = "intranet_rg"
    vnet_key                     = "intranet_vnet"
    remote_vnet_key              = "mgmt_vnet"
    name                         = "intra_mgmt_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  mgmt_intranet_vnet_peer = {
    rg_key                       = "mgmt_rg"
    vnet_key                     = "mgmt_vnet"
    remote_vnet_key              = "intranet_vnet"
    name                         = "mgmt_intra_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # mgmt and intranet ingress egress
  mgmt_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "mgmt_rg"
    vnet_key                     = "mgmt_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "mgmt_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  intranet_ingress_egress_mgmt_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "mgmt_vnet"
    name                         = "intranet_ingress_egress_mgmt_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
}

# Subnets
subnets = {
  # internet ingress egress firewall
  intranet_ingress_egress_firewall_subnet = {
    rg_key           = "intranet_ingress_egress_rg"
    vnet_key         = "intranet_ingress_egress_vnet"
    name             = "AzureFirewallSubnet"
    address_prefixes = ["10.1.0.0/24"]
  }

  # intranet
  intranet_web_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraWebSubnet"
    address_prefixes = ["10.2.0.0/24"]
  }

  intranet_app_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraAppSubnet"
    address_prefixes = ["10.2.1.0/24"]
  }

  intranet_db_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraDbSubnet"
    address_prefixes = ["10.2.2.0/24"]
  }

  mgmt_bastion_subnet = {
    rg_key           = "mgmt_rg"
    vnet_key         = "mgmt_vnet"
    name             = "AzureBastionSubnet"
    address_prefixes = ["10.3.0.0/24"]
  }
}

##########################################
# NSG module
##########################################

# Network security groups
network_security_groups = {
  
}

# Network security group associations
network_security_group_associations = {
  
}

##########################################
# Firewall module
##########################################

# Firewall public ips
firewall_public_ips = {
  # intranet_ingress_egress_firewall_public_ip = {
  #   rg_key            = "intranet_ingress_egress_rg"
  #   name              = "intranet_ingress_egress_firewall_ip"
  #   allocation_method = "Static"
  #   sku               = "Standard"
  # }
}

# Firewall
firewalls = {
  # intranet_ingress_egress_firewall = {
  #   rg_key   = "intranet_ingress_egress_rg"
  #   name     = "intranet_ingress_egress_firewall"
  #   sku_name = "AZFW_VNet"
  #   sku_tier = "Standard"

  #   # enable DNS proxy by setting custom DNS
  #   dns_servers = ["10.4.0.4"]
  #   # dns_server_type = "private_dns_resolver_inbound_endpoint"
  #   # dns_server_key  = "private_dns_resolver_inbound_endpoint"
  #   # dns_server_ip   = ""

  #   ip_configurations = [
  #     {
  #       subnet_key     = "intranet_ingress_egress_firewall_subnet"
  #       public_ip_key  = "intranet_ingress_egress_firewall_public_ip"
  #       ip_config_name = "intranet_ingress_egress_firewall_ip_config"
  #     }
  #   ]
  #   virtual_hubs = []
  # }
}

##########################################
# Bastion module
##########################################

# Bastion public ips
bastion_public_ips = {
  # mgmt_bastion_public_ip = {
  #   rg_key            = "mgmt_rg"
  #   name              = "mgmt_bastion_ip"
  #   allocation_method = "Static"
  #   sku               = "Standard"
  # }
}

# Bastion
bastions = {
  # mgmt_bastion = {
  #   rg_key         = "mgmt_rg"
  #   subnet_key     = "mgmt_bastion_subnet"
  #   public_ip_key  = "mgmt_bastion_public_ip"
  #   name           = "mgmt_bastion"
  #   ip_config_name = "mgmt_bastiion_ip_config"
  # }
}
