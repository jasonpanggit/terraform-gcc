##################################################################################################################
# This is the TF VARS file for setting up premise dns forwarding demo with the following
# GCC2 side
# - intranet ingress_egress resource group
# -- intranet ingress egress vnet 
# -- firewall in AzureFirewallSubnet
# --- enable firewall DNS server and DNS proxy and set IP address of private DNS resolver inbound endpoint
# - intranet resource group
# -- intranet vnet: blob storage account with private endpoint in IntraWebSubnet
# - mgmt resource group
# -- mgmt vnet
# -- bastion
# - dns resource group
# -- dns vnet
# -- private dns resolver in inbound endpoint in DnsInboundSubnet
# -- private dns zones with privatelink.blob.core.windows.net zone
# --- A record of blob storage account with private IP address
# On premise side
# - on premise resource group
# -- on premise vnet
# -- firewall in AzureFirewallSubnet
# --- enable firewall DNS server and DNS proxy and set IP address of intranet ingress egress firewall
# -- Windows Server 2016 VM in DnsSubnet
# --- extension to install DNS server and configure conditional forwarding of blob.core.windows.net to on premise firewall   
# -- Windows Server 2016 VM in GsibSubnet
# -- NSGs to block inbound and outbound internet access and associated with DnsSubnet and GsibSubnet
##################################################################################################################

subscription_id = "enter-subscription-id"
tenant_id       = "enter-tenant-id"
client_id       = "enter-client-id"
client_secret   = "enter-client-secret"

##########################################
# Resource Group module
##########################################

random_string_length = 4
location             = "East US"

# Resource groups
resource_groups = {
  on_premise_rg = {
    name = "on_premise_rg"
  }

  intranet_rg = {
    name = "intranet_rg"
  }

  intranet_ingress_egress_rg = {
    name = "intranet_ingress_egress_rg"
  }

  mgmt_rg = {
    name = "mgmt_rg"
  }

  dns_rg = {
    name = "dns_rg"
  }
}

##########################################
# Network module
##########################################

# Virtual networks
virtual_networks = {
  # on premise
  on_premise_vnet = {
    rg_key        = "on_premise_rg"
    name          = "on_premise_vnet"
    address_space = ["10.0.0.0/16"]
    # set vnet dns server to on premise dns server
    dns_servers = ["10.0.0.4"]
    tags        = {}
  }

  # intranet ingress egress
  intranet_ingress_egress_vnet = {
    rg_key        = "intranet_ingress_egress_rg"
    name          = "intranet_ingress_egress_vnet"
    address_space = ["10.1.0.0/16"]
    tags          = {}
  }

  # intranet
  intranet_vnet = {
    rg_key        = "intranet_rg"
    name          = "intranet_vnet"
    address_space = ["10.2.0.0/16"]
    tags          = {}
  }

  # management
  mgmt_vnet = {
    rg_key        = "mgmt_rg"
    name          = "mgmt_vnet"
    address_space = ["10.3.0.0/16"]
    tags          = {}
  }

  # dns
  dns_vnet = {
    rg_key        = "dns_rg"
    name          = "dns_vnet"
    address_space = ["10.4.0.0/16"]
    tags          = {}
  }
}

# Virtual network peerings
vnet_peers = {
  # on premise and intranet ingress egress
  on_premise_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "on_premise_rg"
    vnet_key                     = "on_premise_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "on_premise_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  intranet_ingress_egress_on_premise_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "on_premise_vnet"
    name                         = "intranet_ingress_egress_on_premise_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # intranet ingress egress and intranet
  intranet_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "intranet_rg"
    vnet_key                     = "intranet_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "intranet_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  intranet_ingress_egress_intranet_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "intranet_vnet"
    name                         = "intranet_ingress_egress_intranet_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # intranet and mgmt
  intranet_mgmt_vnet_peer = {
    rg_key                       = "intranet_rg"
    vnet_key                     = "intranet_vnet"
    remote_vnet_key              = "mgmt_vnet"
    name                         = "intra_mgmt_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  mgmt_intranet_vnet_peer = {
    rg_key                       = "mgmt_rg"
    vnet_key                     = "mgmt_vnet"
    remote_vnet_key              = "intranet_vnet"
    name                         = "mgmt_intra_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # mgmt and intranet ingress egress
  mgmt_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "mgmt_rg"
    vnet_key                     = "mgmt_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "mgmt_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  intranet_ingress_egress_mgmt_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "mgmt_vnet"
    name                         = "intranet_ingress_egress_mgmt_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # mgmt and on premise
  mgmt_on_premise_vnet_peer = {
    rg_key                       = "mgmt_rg"
    vnet_key                     = "mgmt_vnet"
    remote_vnet_key              = "on_premise_vnet"
    name                         = "mgmt_on_premise_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  on_premise_mgmt_vnet_peer = {
    rg_key                       = "on_premise_rg"
    vnet_key                     = "on_premise_vnet"
    remote_vnet_key              = "mgmt_vnet"
    name                         = "on_premise_mgmt_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # dns and intranet_ingress_egress
  dns_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "dns_rg"
    vnet_key                     = "dns_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "dns_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  intranet_ingress_egress_dns_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "dns_vnet"
    name                         = "intranet_ingress_egress_dns_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
}

# Subnets
subnets = {
  # on premise
  on_premise_firewall_subnet = {
    rg_key           = "on_premise_rg"
    vnet_key         = "on_premise_vnet"
    name             = "AzureFirewallSubnet"
    address_prefixes = ["10.0.0.0/24"]
  }

  on_premise_dns_subnet = {
    rg_key           = "on_premise_rg"
    vnet_key         = "on_premise_vnet"
    name             = "DnsSubnet"
    address_prefixes = ["10.0.1.0/24"]
  }

  on_premise_gsib_subnet = {
    rg_key           = "on_premise_rg"
    vnet_key         = "on_premise_vnet"
    name             = "GsibSubnet"
    address_prefixes = ["10.0.2.0/24"]
  }

  # internet ingress egress firewall
  intranet_ingress_egress_firewall_subnet = {
    rg_key           = "intranet_ingress_egress_rg"
    vnet_key         = "intranet_ingress_egress_vnet"
    name             = "AzureFirewallSubnet"
    address_prefixes = ["10.1.0.0/24"]
  }

  # intranet
  intranet_web_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraWebSubnet"
    address_prefixes = ["10.2.0.0/24"]
  }

  intranet_app_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraAppSubnet"
    address_prefixes = ["10.2.1.0/24"]
  }

  intranet_db_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraDbSubnet"
    address_prefixes = ["10.2.2.0/24"]
  }

  mgmt_bastion_subnet = {
    rg_key           = "mgmt_rg"
    vnet_key         = "mgmt_vnet"
    name             = "AzureBastionSubnet"
    address_prefixes = ["10.3.0.0/24"]
  }

  dns_inbound_subnet = {
    rg_key           = "dns_rg"
    vnet_key         = "dns_vnet"
    name             = "DnsInboundSubnet"
    address_prefixes = ["10.4.0.0/24"]

    # for Private DNS Resolver
    delegation = {
      dnsResolvers = {
        service_name    = "Microsoft.Network/dnsResolvers"
        service_actions = ["Microsoft.Network/virtualNetworks/subnets/join/action"]
      }
    }
  }

  dns_outbound_subnet = {
    rg_key           = "dns_rg"
    vnet_key         = "dns_vnet"
    name             = "DnsOutboundSubnet"
    address_prefixes = ["10.4.1.0/24"]

    # for Private DNS Resolver
    delegation = {
      dnsResolvers = {
        service_name    = "Microsoft.Network/dnsResolvers"
        service_actions = ["Microsoft.Network/virtualNetworks/subnets/join/action"]
      }
    }
  }
}

##########################################
# NSG module
##########################################

# Network security groups
network_security_groups = {
  on_premise_dns_nsg = {
    rg_key = "on_premise_rg"
    name   = "on_premise_dns_nsg"
    tags   = {}
    security_rules = [
      # inbound
      {
        name                         = "DenyInternetInbound"
        priority                     = 4096
        direction                    = "Inbound"
        access                       = "Deny"
        protocol                     = "*"
        source_port_range            = "*"
        source_port_ranges           = [""]
        destination_port_range       = "*"
        destination_port_ranges      = [""]
        source_address_prefix        = "Internet"
        source_address_prefixes      = [""]
        destination_address_prefix   = "VirtualNetwork"
        destination_address_prefixes = [""]
      },
      # outbound
      {
        name                         = "DenyInternetOutbound"
        priority                     = 4096
        direction                    = "Outbound"
        access                       = "Deny"
        protocol                     = "*"
        source_port_range            = "*"
        source_port_ranges           = [""]
        destination_port_range       = "*"
        destination_port_ranges      = [""]
        source_address_prefix        = "VirtualNetwork"
        source_address_prefixes      = [""]
        destination_address_prefix   = "Internet"
        destination_address_prefixes = [""]
      }
    ]
  }
  on_premise_gsib_nsg = {
    rg_key = "on_premise_rg"
    name   = "on_premise_gsib_nsg"
    tags   = {}
    security_rules = [
      # inbound
      {
        name                         = "DenyInternetInbound"
        priority                     = 4096
        direction                    = "Inbound"
        access                       = "Deny"
        protocol                     = "*"
        source_port_range            = "*"
        source_port_ranges           = [""]
        destination_port_range       = "*"
        destination_port_ranges      = [""]
        source_address_prefix        = "Internet"
        source_address_prefixes      = [""]
        destination_address_prefix   = "VirtualNetwork"
        destination_address_prefixes = [""]
      },
      # outbound
      {
        name                         = "DenyInternetOutbound"
        priority                     = 4096
        direction                    = "Outbound"
        access                       = "Deny"
        protocol                     = "*"
        source_port_range            = "*"
        source_port_ranges           = [""]
        destination_port_range       = "*"
        destination_port_ranges      = [""]
        source_address_prefix        = "VirtualNetwork"
        source_address_prefixes      = [""]
        destination_address_prefix   = "Internet"
        destination_address_prefixes = [""]
      }
    ]
  }
}

# Network security group associations
network_security_group_associations = {
  # on premise
  on_premise_dns_subnet_nsg_assoc = {
    nsg_key    = "on_premise_dns_nsg"
    subnet_key = "on_premise_dns_subnet"
  }
  on_premise_gsib_subnet_nsg_assoc = {
    nsg_key    = "on_premise_gsib_nsg"
    subnet_key = "on_premise_gsib_subnet"
  }
}

##########################################
# Firewall module
##########################################

# Firewall public ips
firewall_public_ips = {
  intranet_ingress_egress_firewall_public_ip = {
    rg_key            = "intranet_ingress_egress_rg"
    name              = "intranet_ingress_egress_firewall_ip"
    allocation_method = "Static"
    sku               = "Standard"
  }

  on_premise_firewall_public_ip = {
    rg_key            = "on_premise_rg"
    name              = "on_premise_firewall_ip"
    allocation_method = "Static"
    sku               = "Standard"
  }
}

# Firewall
firewalls = {
  intranet_ingress_egress_firewall = {
    rg_key   = "intranet_ingress_egress_rg"
    name     = "intranet_ingress_egress_firewall"
    sku_name = "AZFW_VNet"
    sku_tier = "Standard"

    # enable DNS proxy by setting custom DNS
    dns_servers = ["10.4.0.4"]
    # dns_server_type = "private_dns_resolver_inbound_endpoint"
    # dns_server_key  = "private_dns_resolver_inbound_endpoint"
    # dns_server_ip   = ""

    ip_configurations = [
      {
        subnet_key     = "intranet_ingress_egress_firewall_subnet"
        public_ip_key  = "intranet_ingress_egress_firewall_public_ip"
        ip_config_name = "intranet_ingress_egress_firewall_ip_config"
      }
    ]
    virtual_hubs = []
  }

  on_premise_firewall = {
    rg_key   = "on_premise_rg"
    name     = "on_premise_firewall"
    sku_name = "AZFW_VNet"
    sku_tier = "Standard"

    # enable DNS proxy by setting custom DNS
    dns_servers = ["10.1.0.4"]
    # dns_server_type = "firewall"
    # dns_server_key  = "intranet_ingress_egress_firewall"
    # dns_server_ip   = ""

    ip_configurations = [
      {
        subnet_key     = "on_premise_firewall_subnet"
        public_ip_key  = "on_premise_firewall_public_ip"
        ip_config_name = "on_premise_firewall_ip_config"
      }
    ]
    virtual_hubs = []
  }
}

##########################################
# Bastion module
##########################################

# Bastion public ips
bastion_public_ips = {
  mgmt_bastion_public_ip = {
    rg_key            = "mgmt_rg"
    name              = "mgmt_bastion_ip"
    allocation_method = "Static"
    sku               = "Standard"
  }
}

# Bastion
bastions = {
  mgmt_bastion = {
    rg_key         = "mgmt_rg"
    subnet_key     = "mgmt_bastion_subnet"
    public_ip_key  = "mgmt_bastion_public_ip"
    name           = "mgmt_bastion"
    ip_config_name = "mgmt_bastiion_ip_config"
  }
}

##########################################
# VM module
##########################################

# VM NICs
vm_nics = {
  on_premise_dns_vm_nic = {
    rg_key         = "on_premise_rg"
    subnet_key     = "on_premise_dns_subnet"
    name           = "on_premise_dns_vm_nic"
    ip_config_name = "on_premise_dns_vm_ip_config"
  }

  on_premise_gsib_vm_nic = {
    rg_key         = "on_premise_rg"
    subnet_key     = "on_premise_gsib_subnet"
    name           = "on_premise_gsib_vm_nic"
    ip_config_name = "on_premise_gsib_vm_ip_config"
  }
}

# Windows VMs - vm name max. 15 characters
windows_vms = {
  on_premise_dns_vm = {
    rg_key                          = "on_premise_rg"
    nic_key                         = "on_premise_dns_vm_nic"
    name                            = "dns-vm"
    size                            = "Standard_B1ms"
    disable_password_authentication = false
    admin_username                  = "adminuser"
    admin_password                  = "P@55w0rd1234"
    caching                         = "ReadWrite"
    storage_account_type            = "Standard_LRS"
  }

  on_premise_gsib_vm = {
    rg_key                          = "on_premise_rg"
    nic_key                         = "on_premise_gsib_vm_nic"
    name                            = "gsib-vm"
    size                            = "Standard_B1ms"
    disable_password_authentication = false
    admin_username                  = "adminuser"
    admin_password                  = "P@55w0rd1234"
    caching                         = "ReadWrite"
    storage_account_type            = "Standard_LRS"
  }
}

# Windows VM extensions
windows_vm_extensions = {
  on_premise_dns_vm_extension = {
    vm_key               = "on_premise_dns_vm"
    extension_script_key = "on_premise_dns_server_setup"
    # set args[0] to create conditional forwarding rule for blob.core.windows.net
    params               = "blob.core.windows.net"
    # set args[1] to firewall ip to forward dns query to on premise firewall
    resource_type        = "firewall" # firewall or params (if param, then set firewall_key to empty string, else set params to empty string)
    firewall_key         = "on_premise_firewall"
    name                 = "on_premise_dns_vm_ext"
  }
}

# VM extension scripts to be loaded
vm_extension_scripts = {
  on_premise_dns_server_setup = {
    path = "./scripts/dns_server/dns_server_setup.ps1"
  }
}

##########################################
# Route table module
##########################################

# Route tables
route_tables = {
  # UDR for on premise dns to route 0.0.0.0/0 to on premise firewall
  on_premise_dns_firewall_route_table = {
    rg_key                        = "on_premise_rg"
    rt_key                        = "on_premise_dns_firewall_route_table"
    subnet_key                    = "on_premise_dns_subnet"
    name                          = "on_premise_dns_firewall_route_table"
    disable_bgp_route_propagation = true
    routes = [
      {
        name                   = "Route-to-Firewall"
        address_prefix         = "0.0.0.0/0"
        next_hop_type          = "VirtualAppliance"
        next_hop_resource_type = "firewall"
        next_hop_resource_key  = "on_premise_firewall"
      }
    ]
    tags = {}
  }

  on_premise_gsib_firewall_route_table = {
    rg_key                        = "on_premise_rg"
    rt_key                        = "on_premise_gsib_firewall_route_table"
    subnet_key                    = "on_premise_gsib_subnet"
    name                          = "on_premise_gsib_firewall_route_table"
    disable_bgp_route_propagation = true
    routes = [
      {
        name                   = "Route-to-Firewall"
        address_prefix         = "0.0.0.0/0"
        next_hop_type          = "VirtualAppliance"
        next_hop_resource_type = "firewall"
        next_hop_resource_key  = "on_premise_firewall"
      }
    ]
    tags = {}
  }
}

##########################################
# Private DNS zone module
##########################################

private_dns_zones = {
  privatelink_blob_core_windows_net_zone = {
    rg_key = "dns_rg"
    name   = "privatelink.blob.core.windows.net"
  }
}

private_dns_zone_vnet_links = {
  blob_core_windows_net_zone_vnet_link = {
    rg_key               = "dns_rg"
    private_dns_zone_key = "privatelink_blob_core_windows_net_zone"
    vnet_key             = "dns_vnet"
    name                 = "dns_vnet_private_dns_zone_link"
  }
}

##########################################
# Storage account module
##########################################

storage_accounts = {
  intranet_web_blob_storage_account = {
    rg_key                        = "intranet_rg"
    name                          = "intranetwebblobsa"
    account_tier                  = "Standard"
    account_replication_type      = "LRS"
    public_network_access_enabled = false
    is_hns_enabled                = true
    sftp_enabled                  = false
    identity_type                 = "SystemAssigned"
  }
}

storage_account_private_endpoints = {
  intranet_web_storage_account_private_endpoint = {
    rg_key     = "intranet_rg"
    subnet_key = "intranet_web_subnet"
    name       = "intranet_web_storage_account_private_endpoint"
    private_service_connections = [
      {
        storage_account_key  = "intranet_web_blob_storage_account"
        name                 = "intranet_web_blob_storage_account_psc"
        is_manual_connection = false
        subresource_names    = ["blob"]
      }
    ]
  }
}

storage_account_private_endpoint_private_dns_zone_a_records = {
  intranet_web_storage_account_private_dns_zone_a_records = {
    private_dns_zone_key = "privatelink_blob_core_windows_net_zone"
    private_endpoint_key = "intranet_web_storage_account_private_endpoint"
    rg_key               = "dns_rg"
    storage_account_key  = "intranet_web_blob_storage_account"
    ttl                  = 3600
  }
}

##########################################
# Private DNS resolver module
##########################################

private_dns_resolvers = {
  private_dns_resolver = {
    rg_key   = "dns_rg"
    vnet_key = "dns_vnet"
    name     = "private_dns_resolver"
  }
}

private_dns_resolvers_inbound_endpoints = {
  private_dns_resolver_inbound_endpoint = {
    private_dns_resolver_key     = "private_dns_resolver"
    subnet_key                   = "dns_inbound_subnet"
    name                         = "private_dns_resolver_inbound_endpoint"
    private_ip_allocation_method = "Dynamic"
  }
}