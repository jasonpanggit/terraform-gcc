##################################################################################################################
# This is the TF VARS file for setting up basic intranet zone with the following
# - intranet ingress egress vnet
# -- firewall
# - intranet vnet (peered with intranet ingress egress vnet)
# -- app gateway in web subnet
# -- aks private cluster in app subnet
# - management vnet (peered with intranet ingress egress vnet and intranet vnet)
##################################################################################################################

subscription_id = "enter-subscription-id"
tenant_id       = "enter-tenant-id"
client_id       = "enter-client-id"
client_secret   = "enter-client-secret"

##########################################
# Resource Group module
##########################################

random_string_length = 4
location             = "East US"

# Resource groups
resource_groups = {
  intranet_rg = {
    name = "intranet_rg"
  }

  intranet_ingress_egress_rg = {
    name = "intranet_ingress_egress_rg"
  }

  mgmt_rg = {
    name = "mgmt_rg"
  }

  dns_rg = {
    name = "dns_rg"
  }
}

##########################################
# Network module
##########################################

# Virtual networks
virtual_networks = {
  # intranet ingress egress
  intranet_ingress_egress_vnet = {
    rg_key        = "intranet_ingress_egress_rg"
    name          = "intranet_ingress_egress_vnet"
    address_space = ["10.1.0.0/16"]
    tags          = {}
  }

  # intranet
  intranet_vnet = {
    rg_key        = "intranet_rg"
    name          = "intranet_vnet"
    address_space = ["10.2.0.0/16"]
    tags          = {}
  }

  # management
  mgmt_vnet = {
    rg_key        = "mgmt_rg"
    name          = "mgmt_vnet"
    address_space = ["10.3.0.0/16"]
    tags          = {}
  }

  dns_vnet = {
    rg_key        = "dns_rg"
    name          = "dns_vnet"
    address_space = ["10.4.0.0/16"]
    tags          = {}
  }
}

# Virtual network peerings
vnet_peers = {
  # intranet ingress egress and intranet
  intranet_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "intranet_rg"
    vnet_key                     = "intranet_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "intranet_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  intranet_ingress_egress_intranet_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "intranet_vnet"
    name                         = "intranet_ingress_egress_intranet_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # intranet and mgmt
  intranet_mgmt_vnet_peer = {
    rg_key                       = "intranet_rg"
    vnet_key                     = "intranet_vnet"
    remote_vnet_key              = "mgmt_vnet"
    name                         = "intra_mgmt_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  mgmt_intranet_vnet_peer = {
    rg_key                       = "mgmt_rg"
    vnet_key                     = "mgmt_vnet"
    remote_vnet_key              = "intranet_vnet"
    name                         = "mgmt_intra_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }

  # mgmt and intranet ingress egress
  mgmt_intranet_ingress_egress_vnet_peer = {
    rg_key                       = "mgmt_rg"
    vnet_key                     = "mgmt_vnet"
    remote_vnet_key              = "intranet_ingress_egress_vnet"
    name                         = "mgmt_intranet_ingress_egress_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
  intranet_ingress_egress_mgmt_vnet_peer = {
    rg_key                       = "intranet_ingress_egress_rg"
    vnet_key                     = "intranet_ingress_egress_vnet"
    remote_vnet_key              = "mgmt_vnet"
    name                         = "intranet_ingress_egress_mgmt_peering"
    allow_virtual_network_access = "true"
    allow_forwarded_traffic      = "true"
    allow_gateway_transit        = "false"
    use_remote_gateways          = "false"
  }
}

# Subnets
subnets = {
  # internet ingress egress firewall
  intranet_ingress_egress_firewall_subnet = {
    rg_key           = "intranet_ingress_egress_rg"
    vnet_key         = "intranet_ingress_egress_vnet"
    name             = "AzureFirewallSubnet"
    address_prefixes = ["10.1.0.0/24"]
  }

  intranet_application_gateway_subnet = {
    rg_key           = "intranet_ingress_egress_rg"
    vnet_key         = "intranet_ingress_egress_vnet"
    name             = "IntraAppGwSubnet"
    address_prefixes = ["10.1.1.0/24"]
  }

  # intranet
  intranet_aks_system_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraAksSystemSubnet"
    address_prefixes = ["10.2.0.0/24"]
  }

  intranet_aks_user_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraAksUserSubnet"
    address_prefixes = ["10.2.1.0/24"]
  }

  intranet_aks_vm_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraAksVmSubnet"
    address_prefixes = ["10.2.2.0/24"]
  }

  intranet_db_subnet = {
    rg_key           = "intranet_rg"
    vnet_key         = "intranet_vnet"
    name             = "IntraDbSubnet"
    address_prefixes = ["10.2.3.0/24"]
  }

  mgmt_bastion_subnet = {
    rg_key           = "mgmt_rg"
    vnet_key         = "mgmt_vnet"
    name             = "AzureBastionSubnet"
    address_prefixes = ["10.3.0.0/24"]
  }

  mgmt_private_endpoint_subnet = {
    rg_key           = "mgmt_rg"
    vnet_key         = "mgmt_vnet"
    name             = "MgmtPrivateEndpointSubnet"
    address_prefixes = ["10.3.1.0/24"]
  }

  dns_inbound_subnet = {
    rg_key           = "dns_rg"
    vnet_key         = "dns_vnet"
    name             = "DnsInboundSubnet"
    address_prefixes = ["10.4.0.0/24"]

    # for Private DNS Resolver
    delegation = {
      dnsResolvers = {
        service_name    = "Microsoft.Network/dnsResolvers"
        service_actions = ["Microsoft.Network/virtualNetworks/subnets/join/action"]
      }
    }
  }

  dns_outbound_subnet = {
    rg_key           = "dns_rg"
    vnet_key         = "dns_vnet"
    name             = "DnsOutboundSubnet"
    address_prefixes = ["10.4.1.0/24"]

    # for Private DNS Resolver
    delegation = {
      dnsResolvers = {
        service_name    = "Microsoft.Network/dnsResolvers"
        service_actions = ["Microsoft.Network/virtualNetworks/subnets/join/action"]
      }
    }
  }
}

##########################################
# NSG module
##########################################

# Network security groups
network_security_groups = {

}

# Network security group associations
network_security_group_associations = {

}

##########################################
# Firewall module
##########################################

# Firewall public ips
firewall_public_ips = {
  intranet_ingress_egress_firewall_public_ip = {
    rg_key            = "intranet_ingress_egress_rg"
    name              = "intranet_ingress_egress_firewall_ip"
    allocation_method = "Static"
    sku               = "Standard"
  }
}

# Firewall
firewalls = {
  intranet_ingress_egress_firewall = {
    rg_key   = "intranet_ingress_egress_rg"
    name     = "intranet_ingress_egress_firewall"
    sku_name = "AZFW_VNet"
    sku_tier = "Standard"

    # enable DNS proxy by setting custom DNS
    dns_servers = ["10.4.0.4"]
    # dns_server_type = "private_dns_resolver_inbound_endpoint"
    # dns_server_key  = "private_dns_resolver_inbound_endpoint"
    # dns_server_ip   = ""

    ip_configurations = [
      {
        subnet_key     = "intranet_ingress_egress_firewall_subnet"
        public_ip_key  = "intranet_ingress_egress_firewall_public_ip"
        ip_config_name = "intranet_ingress_egress_firewall_ip_config"
      }
    ]
    virtual_hubs = []
  }
}

# Firewall app rules
firewall_app_rule_collections = {
  firewall_aks_app_rules_collection = {
    rg_key       = "intranet_ingress_egress_rg"
    firewall_key = "intranet_ingress_egress_firewall"
    name         = "aks-app-rules"
    priority     = "100"
    action       = "Allow"
    rules = [
      {
        name             = "AllowMicrosoftFqdns"
        source_addresses = ["*"]
        fqdn_tags = null
        target_fqdns = [
          "*.cdn.mscr.io",
          "mcr.microsoft.com",
          "*.data.mcr.microsoft.com",
          "management.azure.com",
          "login.microsoftonline.com",
          "acs-mirror.azureedge.net",
          "dc.services.visualstudio.com",
          "*.opinsights.azure.com",
          "*.oms.opinsights.azure.com",
          "*.microsoftonline.com",
          "*.monitoring.azure.com"
        ]
        protocols = [
          {
            port = "80"
            type = "Http"
          },
          {
            port = "443"
            type = "Https"
          }
        ]
      },
      {
        name             = "AllowFqdnsForOsUpdates"
        source_addresses = ["*"]
        fqdn_tags = null
        target_fqdns = [
          "security.ubuntu.com",
          "ntp.ubuntu.com",
          "packages.microsoft.com"
        ]
        protocols = [
          {
            port = "80"
            type = "Http"
          },
          {
            port = "443"
            type = "Https"
          }
        ]
      },
      {
        name             = "ServiceTag"
        source_addresses = ["*"]
        fqdn_tags = [
          "AzureKubernetesService"
        ]
        target_fqdns = null
        protocols = []
      }
    ]
  }
}

firewall_network_rule_collections = {
  firewall_aks_network_rules_collection = {
    rg_key       = "intranet_ingress_egress_rg"
    firewall_key = "intranet_ingress_egress_firewall"
    name         = "aks-network-rules"
    priority     = "100"
    action       = "Allow"
    rules = [
      {
        name                  = "apiudp"
        source_addresses      = ["*"]
        destination_addresses = ["AzureCloud.EastUS"]
        destination_ports     = ["1194"]
        protocols             = ["UDP"]
      },
      {
        name                  = "aksfwnr"
        source_addresses      = ["*"]
        destination_addresses = ["AzureCloud.EastUS"]
        destination_ports     = ["9000"]
        protocols             = ["TCP"]
      },
      {
        name                  = "DNS"
        source_addresses      = ["*"]
        destination_ports     = ["53"]
        destination_addresses = ["*"]
        protocols             = ["UDP"]
      },
      {
        name              = "ServiceTags"
        source_addresses  = ["*"]
        destination_ports = ["*"]
        destination_addresses = [
          "AzureContainerRegistry",
          "MicrosoftContainerRegistry",
          "AzureActiveDirectory",
        ]
        protocols = ["Any"]
      },
      {
        name                  = "Time"
        source_addresses      = ["*"]
        destination_ports     = ["123"]
        destination_addresses = ["*"]
        protocols             = ["UDP"]
      }
    ]
  }
}

##########################################
# Bastion module
##########################################

# Bastion public ips
bastion_public_ips = {
  mgmt_bastion_public_ip = {
    rg_key            = "mgmt_rg"
    name              = "mgmt_bastion_ip"
    allocation_method = "Static"
    sku               = "Standard"
  }
}

# Bastion
bastions = {
  mgmt_bastion = {
    rg_key         = "mgmt_rg"
    subnet_key     = "mgmt_bastion_subnet"
    public_ip_key  = "mgmt_bastion_public_ip"
    name           = "mgmt_bastion"
    ip_config_name = "mgmt_bastiion_ip_config"
  }
}

##########################################
# VM module
##########################################

# VM NICs
vm_nics = {
  intranet_aks_jumpbox_vm_nic = {
    rg_key         = "intranet_rg"
    subnet_key     = "intranet_aks_vm_subnet"
    name           = "intranet_aks_vm_vm_nic"
    ip_config_name = "intranet_aks_vm_ip_config"
  }
}

# Linux VMs
linux_vms = {
  aks_jumpbox_vm = {
    rg_key                          = "intranet_rg"
    nic_key                         = "intranet_aks_jumpbox_vm_nic"
    name                            = "aks-jumpbox-vm"
    size                            = "Standard_B2ms"
    disable_password_authentication = false
    admin_username                  = "adminuser"
    admin_password                  = "P@55w0rd1234"
    caching                         = "ReadWrite"
    storage_account_type            = "Standard_LRS"
  }
}

##########################################
# Kubernetes module
##########################################
user_assigned_identities = {
  aks_user_assigned_identity = {
    rg_key = "intranet_rg"
    name   = "aks-user-assigned-identity"
  }
}

aks_clusters = {
  intranet_aks_private_cluster = {
    rg_key = "intranet_rg"

    name                    = "intra_aks_private_cluster"
    dns_prefix              = "aks-private"
    private_cluster_enabled = true

    # private dns zone for azmk8s.io
    private_dns_zone_key = "privatelink_region_azmk8s_io_zone"

    # default node pool
    subnet_key                   = "intranet_aks_system_subnet"
    default_node_pool_name       = "default"
    default_node_pool_node_count = "1"
    default_node_pool_vm_size    = "Standard_D2_v2"
    #zones                        = ["1", "2", "3"]

    # network profile
    network_profile_network_plugin     = "azure"
    network_profile_outbound_type      = "userDefinedRouting"
    network_profile_load_balancer_sku  = "standard"
    network_profile_docker_bridge_cidr = "172.17.0.1/16"
    network_profile_dns_service_ip     = "10.41.0.10"
    network_profile_service_cidr       = "10.41.0.0/24"

    # identity
    identity_type              = "UserAssigned"
    user_assigned_identity_key = "aks_user_assigned_identity"

    # proxy_settings = [
    #   {
    #     http_proxy  = "http://<vm-ip>:3128/"
    #     https_proxy = "http://<vm-ip>:3128/"
    #   }
    # ]
  }
}

aks_cluster_node_pools = {
  intranet_aks_private_cluster_user_node_pool = {
    rg_key      = "intranet_rg"
    cluster_key = "intranet_aks_private_cluster"
    subnet_key  = "intranet_aks_user_subnet"
    mode        = "user"
    node_count  = "1"
    vm_size     = "Standard_D2_v2"
    #zones       = ["1", "2", "3"]
  }
}

##########################################
# Route table module
##########################################

# Route tables
route_tables = {
  aks_intranet_firewall_route_table = {
    rg_key                        = "intranet_rg"
    name                          = "intranet_aks_system_route_table"
    disable_bgp_route_propagation = true
    routes = [
      {
        name                   = "Route-to-Firewall"
        address_prefix         = "0.0.0.0/0"
        next_hop_type          = "VirtualAppliance"
        next_hop_resource_type = "firewall"
        next_hop_resource_key  = "intranet_ingress_egress_firewall"
      }
    ]
    tags = {}
  }
}

# Route tables associations
route_tables_associations = {
  aks_intranet_firewall_route_table_assoc = {
    subnet_key      = "intranet_aks_system_subnet"
    route_table_key = "aks_intranet_firewall_route_table"
  }
}


##########################################
# Private DNS zone module
##########################################

private_dns_zones = {
  privatelink_blob_core_windows_net_zone = {
    rg_key = "dns_rg"
    name   = "privatelink.blob.core.windows.net"
  }
  privatelink_vault_core_azure_net_zone = {
    rg_key = "dns_rg"
    name   = "privatelink.vaultcore.azure.net"
  }
  privatelink_azurecr_io_zone = {
    rg_key = "dns_rg"
    name   = "privatelink.azurecr.io"
  }
  privatelink_region_azmk8s_io_zone = {
    rg_key = "dns_rg"
    name   = "privatelink.region.azmk8s.io"
  }
}

private_dns_zone_vnet_links = {
  region_azmk8s_io_zone_vnet_link = {
    rg_key               = "dns_rg"
    private_dns_zone_key = "privatelink_region_azmk8s_io_zone"
    vnet_key             = "intranet_vnet"
    name                 = "intranet_vnet_private_dns_zone_link"
  }
}